{"version":3,"sources":["components/Message.js","components/Formulaire.js","App.js","components/Connexion.js","components/NotFound.js","serviceWorker.js","index.js"],"names":["Message","props","message","className","pseudo","texte","Formulaire","state","longueur","createMessage","addMessage","setState","handleKeyUp","event","key","handleChange","target","value","length","handleSubmit","preventDefault","this","onSubmit","name","onKeyUp","onChange","maxLength","cols","rows","required","type","Component","App","messages","match","params","Date","now","listeMessages","Object","keys","map","cle","Connexion","goToChat","push","to","placeholder","NotFound","Boolean","window","location","hostname","Root","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"yRAWeA,G,MATC,SAACC,GAAW,IAClBC,EAAYD,EAAZC,QACR,OACE,yBAAKC,UAAU,gBACZD,EAAQE,OADX,KACqBF,EAAQG,SCmDlBC,E,4MApDbC,MAAQ,CACNL,QAAS,GACTM,SALc,K,EAQhBC,cAAgB,WAAO,IAAD,EACU,EAAKR,OAKnCS,EANoB,EACZA,YACQ,CACdN,OAHkB,EACAA,OAGlBC,MAAO,EAAKE,MAAML,UAGpB,EAAKS,SAAS,CAACT,QAAS,M,EAG1BU,YAAc,SAAAC,GACM,UAAdA,EAAMC,KACR,EAAKL,iB,EAITM,aAAe,SAACF,GACd,IAAMX,EAAUW,EAAMG,OAAOC,MACzBT,EA1BU,IA0BaN,EAAQgB,OACnC,EAAKP,SAAS,CAAET,UAASM,c,EAG3BW,aAAe,SAACN,GACdA,EAAMO,iBACN,EAAKX,iB,uDAGG,IAAD,EACuBY,KAAKd,MAA3BL,EADD,EACCA,QAASM,EADV,EACUA,SACjB,OACE,0BAAML,UAAU,OAAOmB,SAAWD,KAAKF,cACrC,8BACEI,KAAK,UACLN,MAAOf,EACPsB,QAAUH,KAAKT,YACfa,SAAWJ,KAAKN,aAChBW,UA5CQ,IA6CRC,KAAK,KACLC,KAAK,IACLC,UAAQ,IACV,yBAAK1B,UAAU,QAASK,GACxB,4BAAQsB,KAAK,UAAb,gB,GA/CiBC,aCqCVC,E,4MAlCbzB,MAAQ,CACN0B,SAAU,GACV7B,OAAQ,EAAKH,MAAMiC,MAAMC,OAAO/B,Q,EAGlCM,WAAa,SAAAR,GACX,IAAM+B,EAAQ,eAAS,EAAK1B,MAAM0B,UAClCA,EAAS,KAAD,OAAMG,KAAKC,QAAWnC,EAC9B,EAAKS,SAAS,CAACsB,c,uDAIP,IAAD,OAEDK,EAAgBC,OACnBC,KAAKnB,KAAKd,MAAM0B,UAChBQ,KAAI,SAAAC,GAAG,OAAK,kBAAC,EAAD,CAAS5B,IAAK4B,EAAKxC,QAAS,EAAKK,MAAM0B,SAASS,QAE/D,OACE,kBAAC,WAAD,KACE,yBAAKvC,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,WACbmC,IAGJ,kBAAC,EAAD,CAAYlC,OAAQiB,KAAKd,MAAMH,OAAQM,WAAYW,KAAKX,mB,GA5BhDqB,aCFGY,E,4MAEnBpC,MAAQ,CACNH,OAAQ,GACRwC,UAAU,G,EAGZ7B,aAAe,SAAAF,GACb,IAAMT,EAASS,EAAMG,OAAOC,MAC5B,EAAKN,SAAS,CAACP,Y,EAGjBe,aAAe,SAACN,GACdA,EAAMO,iBAEN,EAAKT,SAAS,CAACiC,UADE,K,uDAMjB,OAAIvB,KAAKd,MAAMqC,SACN,kBAAC,IAAD,CAAUC,MAAI,EAACC,GAAE,kBAAazB,KAAKd,MAAMH,UAGhD,yBAAKD,UAAU,gBACb,0BAAMA,UAAU,YAAYmB,SAAUD,KAAKF,cACzC,2BACEW,KAAK,OACLb,MAAOI,KAAKd,MAAMH,OAClBqB,SAAUJ,KAAKN,aACfgC,YAAY,SACZlB,UAAQ,IACV,4BAAQC,KAAK,UAAb,Y,GAhC6BC,aCCxBiB,EAFE,kBAAM,6BAAK,oDCURC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCTN,IAAMmB,EAAO,WACX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOY,KAAK,kBAAkBC,UAAWxB,IACzC,kBAAC,IAAD,CAAOwB,UAAWR,OAS1BS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnE,c","file":"static/js/main.a396e710.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Message = (props) => {\r\n  const { message } = props;\r\n  return (\r\n    <div className=\"user-message\">\r\n      {message.pseudo}: {message.texte}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { Component } from 'react';\r\n\r\nconst maxLength = 140;\r\n\r\nclass Formulaire extends Component {\r\n  state = {\r\n    message: '',\r\n    longueur: maxLength,\r\n  };\r\n\r\n  createMessage = () => {\r\n    const { addMessage, pseudo} = this.props\r\n    const message = {\r\n      pseudo,\r\n      texte: this.state.message\r\n    }\r\n    addMessage(message)\r\n    this.setState({message: ''})\r\n  }\r\n\r\n  handleKeyUp = event => {\r\n    if (event.key === 'Enter') {\r\n      this.createMessage()\r\n    }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const message = event.target.value;\r\n    let longueur = maxLength - message.length;\r\n    this.setState({ message, longueur });\r\n  };\r\n\r\n  handleSubmit = (event) => {    \r\n    event.preventDefault();\r\n    this.createMessage()\r\n  };\r\n\r\n  render() {\r\n    const { message, longueur } = this.state;\r\n    return (\r\n      <form className=\"form\" onSubmit={ this.handleSubmit }>\r\n        <textarea\r\n          name='message'\r\n          value={message}\r\n          onKeyUp={ this.handleKeyUp }\r\n          onChange={ this.handleChange }\r\n          maxLength={ maxLength }\r\n          cols=\"50\"\r\n          rows=\"5\"\r\n          required/>\r\n        <div className=\"info\">{ longueur }</div>\r\n        <button type=\"submit\">Envoyer</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Formulaire;\r\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport Message from './components/Message';\nimport Formulaire from './components/Formulaire';\n\nclass App extends Component {\n\n  state = {\n    messages: {},\n    pseudo: this.props.match.params.pseudo\n  } \n\n  addMessage = message => {\n    const messages = { ... this.state.messages}\n    messages[`m-${Date.now()}`] = message\n    this.setState({messages})\n  \n  }\n\n  render() {\n    \n    const listeMessages = Object\n      .keys(this.state.messages )\n      .map(cle => (<Message key={cle} message={this.state.messages[cle]}/>))\n      \n    return (\n      <Fragment>\n        <div className=\"box\">\n          <div className='messages'>\n            <div className='message'>\n            { listeMessages }\n            </div>\n          </div>\n          <Formulaire pseudo={this.state.pseudo} addMessage={this.addMessage} />\n        </div>\n        \n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport default class Connexion extends Component {\r\n\r\n  state = {\r\n    pseudo: '',\r\n    goToChat: false\r\n  }\r\n\r\n  handleChange = event => {\r\n    const pseudo = event.target.value;   \r\n    this.setState({pseudo})\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    const goToChat = true; \r\n    this.setState({goToChat})\r\n  }\r\n\r\n\r\n  render() {\r\n    if (this.state.goToChat) {\r\n      return <Redirect push to={`/pseudo/${this.state.pseudo}`} />\r\n    }\r\n    return (\r\n      <div className=\"connexionBox\">\r\n        <form className=\"connexion\" onSubmit={this.handleSubmit}>\r\n          <input \r\n            type=\"text\" \r\n            value={this.state.pseudo}\r\n            onChange={this.handleChange}\r\n            placeholder=\"Pseudo\" \r\n            required />\r\n          <button type=\"submit\">GO</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nconst NotFound = () => <div><h1>Page non trouv√©</h1></div>\r\n\r\nexport default NotFound","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport Connexion from './components/Connexion';\nimport NotFound from './components/NotFound';\nimport * as serviceWorker from './serviceWorker';\n\nconst Root = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Connexion}/>\n        <Route path=\"/pseudo/:pseudo\" component={App}/>\n        <Route component={NotFound}/>\n        {/* <Route exact path=\"/\"><Connexion /></Route>\n        <Route path=\"/pseudo/:pseudo\"><App /></Route>\n        <Route ><NotFound /></Route> */}\n      </Switch>        \n    </BrowserRouter>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}